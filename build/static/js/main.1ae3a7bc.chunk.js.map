{"version":3,"sources":["Config.ts","provenance/utils.ts","provenance/Provenance.ts","provenance/Provectories.ts","App.tsx","index.tsx"],"names":["scopes","workspaceId","reportId","captureBookmark","report","a","bookmarksManager","capture","console","error","undefined","bookmark","applyState","exportData","visual","tries","result","models","ExportDataType","Summarized","toCamelCaseString","title","split","map","t","i","toUpperCase","slice","join","getVisualAttributeMapper","mapper","getCapabilities","capabilities","dataRoles","Promise","all","role","getDataFields","name","dataFields","length","d","idx","getDataFieldDisplayName","attribute","getCurrentVisuals","getPages","then","pages","getVisuals","visuals","filter","v","type","setupProvenance","defaultState","bookmarkRef","provenance","initProvenance","addGlobalObserver","currentNode","getState","current","applyBookmark","log","done","event","onDashboardClick","newState","label","apply","state","stateSaveMode","actionType","eventType","meta","provDiv","document","getElementById","ProvVisCreator","id","goToNode","height","width","textSize","verticalSpace","provVisUpdate","actions","reportContainer","appStateRef","initAppState","forEach","selected","visState","setVisSelected","dataPoints","detail","Object","keys","key","visDesc","identity","target","column","equals","setVisState","appState","categoryMapper","data","replaceAll","groupedData","header","index","currSet","category","row","cell","number","match","value","parseInt","push","currArr","Array","from","reduce","b","Set","setBookmark","captured","provectories","on","obj","JSON","parse","stringify","powerbi","service","Service","factories","hpmFactory","wpmpFactory","routerFactory","accessToken","embedUrl","App","props","myReport","reportRef","React","createRef","reportLoaded","this","renderMyReport","style","display","flex","ref","flexDirection","authenticate","textContent","line","appendChild","createTextNode","createElement","embedConfiguration","tokenType","TokenType","Aad","permissions","Permissions","All","config","settings","visualRenderedEvents","panes","filters","visible","pageNavigation","embed","off","errorMsg","reset","thisObj","msalConfig","auth","clientId","loginRequest","msalInstance","UserAgentApplication","handleRedirectCallback","response","setUsername","account","getembedUrl","setState","getAccount","acquireTokenSilent","catch","err","acquireTokenRedirect","toString","loginRedirect","fetch","headers","method","errorMessage","get","json","body","ok","status","code","username","welcome","innerText","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.1ae3a7bc.chunk.js","sourcesContent":["// ----------------------------------------------------------------------------\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// ----------------------------------------------------------------------------\n\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n\n// Scope of AAD app. Use the below configuration to use all the permissions provided in the AAD app through Azure portal.\n// Refer https://aka.ms/PowerBIPermissions for complete list of Power BI scopes\n// https://analysis.windows.net/powerbi/api/Report.Read.All\nexport const scopes: string[] = [\"https://analysis.windows.net/powerbi/api/Report.Read.All\"];\n\n// Client Id (Application Id) of the AAD app.\nexport const clientId: string = \"1792bed2-974a-4310-9a61-aefe921dcb59\";\n\n// Id of the workspace where the report is hosted\nexport const workspaceId: string = \"ee69ff6f-a178-4528-81f3-c48716951cc6\";\n\n// Id of the report to be embedded\nexport const reportId: string = \"c5c7899e-52df-4a76-962f-8fd0c3537480\";","import { Report } from \"report\";\nimport { IReportBookmark, IExportDataResult } from \"powerbi-models\";\nimport { models, VisualDescriptor } from \"powerbi-client\";\nimport 'powerbi-report-authoring';\nimport { Provenance } from \"@visdesignlab/trrack\";\nimport { IProvectories, IAppState, IFeatureVector } from \"./interfaces\";\n\n\n/**\n * Captures and returns current bookmark\n * @param report Report to capture bookmark from\n */\nexport async function captureBookmark(report: Report): Promise<IReportBookmark | undefined> {\n\ttry {\n\t\treturn await report.bookmarksManager.capture();\n\t}\n\tcatch (error) {\n\t\tconsole.error(error);\n\t}\n\treturn undefined;\n}\n\n/**\n * Applies given bookmark on report\n * @param bookmark Bookmark to apply to\n * @param report Report to apply bookmark on\n */\nexport async function applyBookmark(bookmark: string, report: Report): Promise<void> {\n\ttry {\n\t\tawait report.bookmarksManager.applyState(bookmark);\n\t}\n\tcatch (error) {\n\t\tconsole.error(error);\n\t}\n}\n\n/**\n * Exports underlying data of given visual and handles errors\n * @param visual Visual to get underlying data from\n */\nexport async function exportData(visual: VisualDescriptor): Promise<IExportDataResult | null> {\n\t// starting on 12/16/2021, exportData throws error.\n\t// If call exportData repeatedly a few times then it starts to work.\n\t// Implement pattern to try 4 times before throwing an error\n\n\tlet tries = 0;\n\tlet result: models.IExportDataResult | null = null;\n\twhile (tries < 4) {\n\t\ttry {\n\t\t\tresult = await visual.exportData(models.ExportDataType.Summarized);\n\t\t\tbreak;\n\t\t} catch (err) {\n\t\t\ttries++;\n\t\t\tif (tries === 4) {\n\t\t\t\tconsole.error('exportData', err);\n\t\t\t\t// console.error(`exportData [tries]: ${tries}`);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\n/**\n * Create exact copy of object without referencing on it\n * @param obj Object to copy\n */\nexport function makeDeepCopy<T extends Object>(obj: T): T {\n\treturn typeof obj === 'object' ? JSON.parse(JSON.stringify(obj)) : obj;\n}\n\n/**\n * Takes string and returns multiple word string as one word camel case string\n * @param title String to be camel cased\n */\nexport function toCamelCaseString(title: string): string {\n\treturn title\n\t\t.split(' ')\n\t\t.map((t, i) => i === 0 ? t : t[0].toUpperCase() + t.slice(1))\n\t\t.join('');\n}\n\n/**\n * Categorizes columns of agiven visual to their attribute of the chart in a dict and returns it \n * @param visual \n */\nexport async function getVisualAttributeMapper(visual: VisualDescriptor): Promise<{ [key: string]: string }> {\n\t// const roleToAttributeMap = {\n\t// \t'Y': 'yAxis',\n\t// \t'Category': 'xAxis',\n\t// \t'Series': 'Legend',\n\t// \t'Values': 'Field'\n\t// };\n\n\tconst mapper: { [key: string]: string } = {};\n\tif (visual.getCapabilities) {\n\t\tconst capabilities = await visual.getCapabilities();\n\t\tif (capabilities.dataRoles) {\n\t\t\tawait Promise.all(capabilities.dataRoles.map(async (role) => {\n\t\t\t\tconst dataFields = await visual.getDataFields(role.name);\n\t\t\t\tif (dataFields.length > 0) {\n\t\t\t\t\tawait Promise.all(dataFields.map(async (d, idx) => {\n\t\t\t\t\t\tconst attribute = await visual.getDataFieldDisplayName(role.name, idx);\n\t\t\t\t\t\t// mapper[toCamelCaseString(attribute)] = roleToAttributeMap[role.name];\n\t\t\t\t\t\tmapper[toCamelCaseString(attribute)] = role.name;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}))\n\t\t}\n\t}\n\treturn mapper;\n}\n\n/**\n * Extracts current visuals from a dashboard of a report and returns them in an array\n * @param report Report to extract visuals from\n * Only possible if report is loaded\n */\nexport async function getCurrentVisuals(report: Report): Promise<VisualDescriptor[]> {\n\ttry {\n\t\treturn report\n\t\t\t.getPages().then(async (pages) => pages[1]\n\t\t\t\t.getVisuals().then((visuals) => visuals\n\t\t\t\t\t.filter((v) => v.type !== 'card' && v.type !== 'shape')));\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\treturn [];\n\t}\n}\n\n/**\n * Takes an appState and encodes it as a feature vector. Needs initial app state to know if an attribute is filtered\n * @param currState State to encode as a feature vector\n * @param rootState Initial app state\n */\nfunction appStateToFeatureVector(currState: IAppState, rootState: IAppState): IFeatureVector {\n\tconst featureVector: IFeatureVector = {};\n\tObject.keys(rootState).forEach((vKey) => {\n\t\tconst { visState, selected, type } = currState[vKey];\n\t\tconst rootVisState = rootState[vKey].visState;\n\t\tObject.keys(rootVisState).forEach((aKey) => {\n\t\t\tconst rootAttribute = rootVisState[aKey];\n\t\t\tconst currAttribute = visState[aKey];\n\t\t\tconst vector = (featureVector[vKey + '.' + aKey] = []) as number[][];\n\t\t\t// number arrays will be used as they are\n\t\t\tif (typeof rootAttribute[0] === 'number') {\n\t\t\t\tvector.push(currAttribute.length > 0 ? currAttribute as number[] : [0]);\n\t\t\t} else { // string arrays will be encoded\n\t\t\t\tvector.push(\n\t\t\t\t\t...rootAttribute.map((root) => {\n\t\t\t\t\t\tconst vec = [selected && selected[aKey] === root ? 1 : 0]; // if selected 1\n\t\t\t\t\t\t// slicers can't be filtered\n\t\t\t\t\t\tif (type !== 'slicer') {\n\t\t\t\t\t\t\tvec.push(currAttribute.includes(root) ? 0 : 1); // if filtered then 1 (included = !filtered)\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn vec;\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t});\n\treturn featureVector;\n}\n\n/**\n * Goes through graph, returns feature vector row for each node and returns feature vector matrix\n * @param provenance Provenance object to featurize\n */\nexport function featureVectorizeGraph(provenance: Provenance<IProvectories, string, void>): (string[] | number[][][])[] {\n\tconst { root, graph } = provenance;\n\tconst featureVectors: (string[] | number[][][])[] = [];\n\n\tObject.keys(graph.nodes).forEach((key) => {\n\t\tconst currNode = graph.nodes[key];\n\t\tconst currVector = appStateToFeatureVector(\n\t\t\tprovenance.getState(currNode.id).appState, provenance.getState(root.id).appState\n\t\t);\n\t\t// adding header row\n\t\tif (key === root.id) {\n\t\t\tfeatureVectors.push(['time', ...Object.keys(currVector)]);\n\t\t}\n\t\tconst newRow: number[][][] = [[[currNode.metadata.createdOn || -1]]];\n\t\t// skip first column since time is no key in feature vector\n\t\tnewRow.push(...(featureVectors[0] as string[]).slice(1).map((title: string) => currVector[title]));\n\t\tfeatureVectors.push(newRow);\n\t});\n\tconsole.log(featureVectors);\n\treturn featureVectors;\n}\n\n/**\n * Takes feature vector matrix and converts it to a csv-string\n * @param featureVectors Feature vector matrix\n */\nexport function featureVectorsToCsvString(featureVectors: (string[] | number[][][])[]): string {\n\tlet vectorString = 'data:text/csv;charset=utf-8,';\n\tfeatureVectors.forEach((row, idx) => {\n\t\tif (idx === 0) {\n\t\t\tvectorString += row.join(';') + '\\r\\n';\n\t\t} else {\n\t\t\t(row as number[][][]).forEach((cell, i) => {\n\t\t\t\tlet newString = JSON.stringify(cell).slice(1, -1);\n\t\t\t\t// removes brackets for single value vector\n\t\t\t\tif (cell[0].length === 1) {\n\t\t\t\t\tnewString = newString.replaceAll('[', '').replaceAll(']', '');\n\t\t\t\t}\n\t\t\t\tvectorString += newString;\n\t\t\t\tvectorString += i < row.length - 1 ? ';' : '\\r\\n'\n\t\t\t});\n\t\t}\n\t});\n\treturn vectorString;\n}\n\n/**\n * Returns csv file representing feature vectors of a provenance graph\n * @param provenance Provenance object to convert to csv\n */\nexport function downloadGraphAsFeatVecCsv(provenance: Provenance<IProvectories, string, void>): void {\n\twindow.open(encodeURI(featureVectorsToCsvString(featureVectorizeGraph(provenance))));\n}\n","import { Provenance, NodeID, initProvenance } from '@visdesignlab/trrack';\nimport { ProvVisCreator } from '@visdesignlab/trrack-vis';\nimport { Report } from 'powerbi-client';\nimport { IProvectories } from './interfaces';\nimport { applyBookmark } from './utils';\nimport { ActionReturnType } from '@visdesignlab/trrack/dist/Types/Action';\n\nexport interface IAction {\n  event: (onDashboardClick: () => Promise<{ newState: IProvectories, label: string }>) => void;\n}\n\ninterface IAppProvenance {\n  provenance: Provenance<IProvectories, string, void>;\n  actions: IAction;\n}\n/**\n * Initializes trrack and trrack-vis provenance\n * @param report Current report to apply bookmarks on\n * @param defaultState Initial state of the dashboard\n * @param bookmarkRef Current bookmarkRef to get the update bookmark for performance improvements\n */\nexport function setupProvenance(report: Report, defaultState: IProvectories, bookmarkRef: { current: string }): IAppProvenance {\n  const provenance = initProvenance<IProvectories, string, void>(defaultState as IProvectories);\n\n  provenance.addGlobalObserver(() => {\n    const currentNode = provenance.getState(provenance.current);\n    if (bookmarkRef.current !== currentNode.bookmark) {\n      applyBookmark(provenance.getState(provenance.current).bookmark, report);\n      bookmarkRef.current = '';\n    }\n  });\n\n  console.log(\"provenance\");\n\n  provenance.done();\n\n  const event = async (onDashboardClick: () => Promise<{ newState: IProvectories, label: string }>) => {\n    const { newState, label } = await onDashboardClick();\n    provenance.apply({\n      apply: (state: IProvectories) => ({\n        state: newState as IProvectories,\n        label,\n        stateSaveMode: 'Complete',\n        actionType: 'Regular',\n        eventType: '',\n        meta: {}\n      } as ActionReturnType<IProvectories, string>)\n    }, label);\n  };\n\n  const provVisUpdate = () => {\n    const provDiv = document.getElementById(\"provDiv\");\n    if (provDiv) {\n      ProvVisCreator(\n        provDiv!,\n        provenance,\n        (id: NodeID) => provenance.goToNode(id),\n        true, false, undefined, { height: 500, width: 150, textSize: 12, verticalSpace: 25 });\n    }\n  };\n\n  provVisUpdate();\n\n  return {\n    provenance,\n    actions: {\n      event\n    },\n  };\n}\n","import React from \"react\";\nimport { Report } from \"report\";\nimport { setupProvenance } from \"./Provenance\";\nimport { IProvectories, IAppState } from \"./interfaces\";\nimport { captureBookmark, exportData, toCamelCaseString, getCurrentVisuals, makeDeepCopy, downloadGraphAsFeatVecCsv, getVisualAttributeMapper } from \"./utils\";\nimport { Provenance } from \"@visdesignlab/trrack\";\n\nconst appStateRef: IAppState = {};\nconst bookmarkRef: { current: string } = { current: '' };\n// const provenanceRef: Provenance<IProvectories, string, void> = ;\n// const appStateRef = React.useRef<IAppState>({});\n// const bookmarkRef = React.useRef<string>('');\n// const provenanceRef = React.useRef<Provenance<IProvectories, string, void>>();\n\n/**\n * Initialize appStateRef\n * Only possible if report is loaded\n */\nconst initAppState = async (report: Report) => {\n\tconst visuals = await getCurrentVisuals(report);\n\tvisuals.forEach((v) => {\n\t\tconst title = toCamelCaseString(v.title);\n\t\tif (appStateRef.current && !appStateRef.current[title]) {\n\t\t\tappStateRef.current[toCamelCaseString(title)] = { selected: null, type: v.type, visState: {} };\n\t\t}\n\t});\n};\n\n/**\n * Sets the selected attribute of given visuals extracted from the click-event\n * Only possible if report is loaded\n * @param event click-event from dashboard eventlistener\n */\nconst setVisSelected = (event: any): string => {\n\tconst { dataPoints } = event.detail;\n\tconst { type, title } = event.detail.visual;\n\tconst visuals = appStateRef.current;\n\tlet label = title + ' - ';\n\n\t// clears non slicer values when non slicer selection\n\tif (type !== 'slicer') {\n\t\tObject.keys(visuals).forEach((key) => {\n\t\t\tconst visDesc = visuals[key];\n\t\t\tvisDesc.selected = visDesc.type !== 'slicer' ? null : visDesc.selected;\n\t\t});\n\t}\n\t// asign selected values\n\tif (dataPoints.length > 0) {\n\t\tconst visDesc = visuals[toCamelCaseString(title)];\n\t\tdataPoints[0].identity.forEach((i: any, idx: number) => {\n\t\t\tvisDesc.selected = { ...visDesc.selected, [i.target.column]: i.equals };\n\t\t\tlabel += `${idx > 0 ? '; ' : ''}${i.target.column}: ${i.equals}`;\n\t\t});\n\t\treturn label;\n\t}\n\treturn label + 'deselected';\n};\n\n/**\n * Sets the current state of all visuals of the dashboard on given appState\n * Only possible if report is loaded\n * @param appState appState object of which the visuals should be set\n * @param report to extract the current visuals state\n */\nconst setVisState = async (appState: IAppState, report: Report): Promise<IAppState> => {\n\tconst visuals = await getCurrentVisuals(report);\n\tawait Promise.all(visuals.map(async (v) => {\n\t\tconst result = await exportData(v);\n\t\tconst categoryMapper = await getVisualAttributeMapper(v);\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\t\t// vectorize data string && remove last row (empty)\n\t\tconst data = result.data.replaceAll(\"\\n\", \"\").split('\\r').map((d) => d.split(',')).slice(0, -1);\n\t\tconst groupedData: { [key: string]: any[] } = {};\n\n\t\t// group data columnwise\n\t\tdata[0].forEach((header, index) => {\n\t\t\tconst key = toCamelCaseString(header);\n\t\t\tgroupedData[key] = [];\n\t\t\tconst currSet = groupedData[key];\n\t\t\tconst category = categoryMapper[key];\n\n\t\t\tdata.forEach((row, idx) => {\n\t\t\t\t// skip headers and empty values\n\t\t\t\tif (idx === 0 || !row[index]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst cell = row[index];\n\t\t\t\tconst number = cell.match(/\\d+/);\n\t\t\t\t// only add as number, when cell is not from a category column or legend\n\t\t\t\tconst value = number && category === 'Y' ? parseInt(number[0]) : cell;\n\t\t\t\tcurrSet.push(value);\n\t\t\t});\n\t\t});\n\n\t\tconst { visState } = appState[toCamelCaseString(v.title)];\n\t\t// assign to visual state in right format\n\t\tObject.keys(groupedData).forEach((key) => {\n\t\t\tconst currArr: string[] | number[] = Array.from(groupedData[key]);\n\t\t\tvisState[key] = typeof currArr[0] === 'number' ?\n\t\t\t\t[(currArr as number[]).reduce((a, b) => a + b) / currArr.length]\n\t\t\t\t: Array.from(new Set(currArr as string[]));\n\t\t});\n\t}));\n\treturn appState;\n};\n\n/**\n * Captures bookmark of the current dashboard state, sets it in the bookmarkRef and returns bookmark\n * Only possible if report is loaded\n */\nconst setBookmark = async (report: Report): Promise<string> => {\n\treturn await captureBookmark(report).then((captured) => {\n\t\tconst bookmark = captured?.state || '';\n\t\tbookmarkRef.current = bookmark;\n\t\treturn bookmark;\n\t});\n};\n\n/**\n * initializes provenance, click-event handler and the appState\n */\nexport const provectories = async (report: Report): Promise<void> => {\n\tawait initAppState(report);\n\tconst appState = await setVisState(appStateRef, report);\n\tconst bookmark = await setBookmark(report);\n\tconst { actions, provenance } = setupProvenance(\n\t\treport, { appState, bookmark }, bookmarkRef\n\t);\n\t// provenanceRef = provenance;\n\n\treport?.on(\"dataSelected\", async (event: any) => {\n\t\tconst label = setVisSelected(event);\n\t\tconst bookmark = await setBookmark(report);\n\n\t\t// function call is done in provenance for better performance on the dashboard\n\t\tconst onDashboardClick = async () => {\n\t\t\tconst appState = await setVisState(makeDeepCopy(appStateRef), report);\n\t\t\tconsole.log(appState);\n\t\t\treturn { newState: { bookmark, appState }, label };\n\t\t};\n\n\t\tactions.event(onDashboardClick);\n\t});\n};\n","// ----------------------------------------------------------------------------\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// ----------------------------------------------------------------------------\n\nimport React, { RefObject } from \"react\";\nimport { UserAgentApplication, AuthError, AuthResponse } from \"msal\";\nimport { service, factories, models, IEmbedConfiguration, Report } from \"powerbi-client\";\nimport \"./App.css\";\nimport * as config from \"./Config\";\nimport { provectories } from \"./provenance/Provectories\";\nconst powerbi = new service.Service(factories.hpmFactory, factories.wpmpFactory, factories.routerFactory);\n\nlet accessToken = \"\";\nlet embedUrl = \"\";\nlet reportContainer: HTMLElement;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface AppProps { };\ninterface AppState { accessToken: string; embedUrl: string; error: string[]; reportRef: RefObject<any>; reportLoaded: boolean };\n\nclass App extends React.Component<AppProps, AppState> {\n\tprivate myReport: any | Report;\n\n\tconstructor(props: AppProps) {\n\t\tsuper(props);\n\t\tthis.state = { accessToken: \"\", embedUrl: \"\", error: [], reportRef: React.createRef(), reportLoaded: false };\n\t\tthis.myReport = null;\n\t}\n\n\t// React function\n\trender(): JSX.Element {\n\t\tthis.myReport = this.renderMyReport();\n\n\t\treturn (<>\n\t\t\t<div style={{ display: 'flex' }}>\n\t\t\t\t<div style={{ display: 'flex', flex: 1 }}>\n\t\t\t\t\t<div id=\"reportContainer\" ref={this.state.reportRef} style={{ display: 'flex', flexDirection: 'column', flex: 1 }} >\n\t\t\t\t\t\tLoading the report...\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{/* ProvenanceGraph only works, when report is loaded */}\n\t\t\t\t{/* {this.state.reportLoaded ? <ProvenanceGraph report={this.myReport} /> : null} */}\n\t\t\t</div>\n\t\t</>)\n\t\t\t;\n\t}\n\n\t// React function\n\tasync componentDidMount(): Promise<void> {\n\n\t\tif (this.state.reportRef !== null) {\n\t\t\treportContainer = this.state.reportRef[\"current\"];\n\t\t}\n\n\t\t// User input - null check\n\t\tif (config.workspaceId === \"\" || config.reportId === \"\") {\n\t\t\tthis.setState({ error: [\"Please assign values to workspace Id and report Id in Config.ts file\"] })\n\t\t} else {\n\n\t\t\t// Authenticate the user and generate the access token\n\t\t\tthis.authenticate();\n\t\t}\n\t}\n\n\trenderMyReport(): Report {\n\n\t\tlet report: any | Report = null;\n\n\t\tif (this.state.error.length) {\n\t\t\t// Cleaning the report container contents and rendering the error message in multiple lines\n\t\t\treportContainer.textContent = \"\";\n\t\t\tthis.state.error.forEach(line => {\n\t\t\t\treportContainer.appendChild(document.createTextNode(line));\n\t\t\t\treportContainer.appendChild(document.createElement(\"br\"));\n\t\t\t});\n\t\t\tconsole.log('Error', this.state.error);\n\t\t} else if (this.state.accessToken !== \"\" && this.state.embedUrl !== \"\") { // comment this condition\n\n\t\t\tconst embedConfiguration: IEmbedConfiguration = {\n\t\t\t\ttype: \"report\",\n\t\t\t\ttokenType: models.TokenType.Aad,\n\t\t\t\taccessToken,\n\t\t\t\tembedUrl,\n\t\t\t\tpermissions: models.Permissions.All,\n\t\t\t\tid: config.reportId,\n\t\t\t\tsettings: {\n\t\t\t\t\tvisualRenderedEvents: true,\n\t\t\t\t\tpanes: {\n\t\t\t\t\t\tfilters: {\n\t\t\t\t\t\t\tvisible: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpageNavigation: {\n\t\t\t\t\t\t\tvisible: true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treport = powerbi.embed(reportContainer, embedConfiguration) as Report;\n\n\n\t\t\t// Clear any other loaded handler events\n\t\t\treport.off(\"loaded\");\n\n\t\t\t// Triggers when a content schema is successfully loaded\n\t\t\tconst setLoaded = () => { this.setState({ reportLoaded: true }) };\n\t\t\treport.on(\"loaded\", function () {\n\t\t\t\tconsole.log(\"Report load successful\");\n\t\t\t\tprovectories(report);\n\t\t\t});\n\n\t\t\t// Clear any other rendered handler events\n\t\t\treport.off(\"rendered\");\n\n\t\t\t// Triggers when a content is successfully embedded in UI\n\t\t\treport.on(\"rendered\", function () {\n\t\t\t\t// console.log(\"Report render successful\");\n\t\t\t});\n\n\t\t\t// Clear any other error handler event\n\t\t\treport.off(\"error\");\n\n\t\t\t// Below patch of code is for handling errors that occur during embedding\n\t\t\treport.on(\"error\", function (event: any) {\n\t\t\t\tconst errorMsg = event.detail;\n\n\t\t\t\t// Use errorMsg variable to log error in any destination of choice\n\t\t\t\tconsole.error(errorMsg);\n\t\t\t});\n\t\t}\n\n\t\treturn report;\n\t}\n\n\t// React function\n\tcomponentWillUnmount(): void {\n\t\tpowerbi.reset(reportContainer);\n\t}\n\n\t// Authenticating to get the access token\n\tauthenticate(): void {\n\t\tconst thisObj = this;\n\n\t\tconst msalConfig = {\n\t\t\tauth: {\n\t\t\t\tclientId: config.clientId\n\t\t\t}\n\t\t};\n\n\t\tconst loginRequest = {\n\t\t\tscopes: config.scopes\n\t\t};\n\n\t\tconst msalInstance: UserAgentApplication = new UserAgentApplication(msalConfig);\n\n\t\tfunction successCallback(response: AuthResponse): void {\n\n\t\t\tif (response.tokenType === \"id_token\") {\n\t\t\t\tthisObj.authenticate();\n\n\t\t\t} else if (response.tokenType === \"access_token\") {\n\n\t\t\t\taccessToken = response.accessToken;\n\t\t\t\tthisObj.setUsername(response.account.name);\n\t\t\t\tthisObj.getembedUrl();\n\n\t\t\t} else {\n\n\t\t\t\tthisObj.setState({ error: [(\"Token type is: \" + response.tokenType)] });\n\t\t\t}\n\t\t}\n\n\t\tfunction failCallBack(error: AuthError): void {\n\n\t\t\tthisObj.setState({ error: [\"Redirect error: \" + error] });\n\t\t}\n\n\t\tmsalInstance.handleRedirectCallback(successCallback, failCallBack);\n\n\t\t// check if there is a cached user\n\t\tif (msalInstance.getAccount()) {\n\n\t\t\t// get access token silently from cached id-token\n\t\t\tmsalInstance.acquireTokenSilent(loginRequest)\n\t\t\t\t.then((response: AuthResponse) => {\n\n\t\t\t\t\t// get access token from response: response.accessToken\n\t\t\t\t\taccessToken = response.accessToken;\n\t\t\t\t\tthis.setUsername(response.account.name);\n\t\t\t\t\tthis.getembedUrl();\n\t\t\t\t})\n\t\t\t\t.catch((err: AuthError) => {\n\n\t\t\t\t\t// refresh access token silently from cached id-token\n\t\t\t\t\t// makes the call to handleredirectcallback\n\t\t\t\t\tif (err.name === \"InteractionRequiredAuthError\") {\n\t\t\t\t\t\tmsalInstance.acquireTokenRedirect(loginRequest);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthisObj.setState({ error: [err.toString()] })\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} else {\n\n\t\t\t// user is not logged in or cached, you will need to log them in to acquire a token\n\t\t\tmsalInstance.loginRedirect(loginRequest);\n\t\t}\n\t}\n\n\t// Power BI REST API call to get the embed URL of the report\n\tgetembedUrl(): void {\n\t\tconst thisObj: this = this;\n\n\t\tfetch(\"https://api.powerbi.com/v1.0/myorg/groups/\" + config.workspaceId + \"/reports/\" + config.reportId, {\n\t\t\theaders: {\n\t\t\t\t\"Authorization\": \"Bearer \" + accessToken\n\t\t\t},\n\t\t\tmethod: \"GET\"\n\t\t})\n\t\t\t.then(function (response) {\n\t\t\t\tconst errorMessage: string[] = [];\n\t\t\t\terrorMessage.push(\"Error occurred while fetching the embed URL of the report\")\n\t\t\t\terrorMessage.push(\"Request Id: \" + response.headers.get(\"requestId\"));\n\n\t\t\t\tresponse.json()\n\t\t\t\t\t.then(function (body) {\n\t\t\t\t\t\t// Successful response\n\t\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\t\tembedUrl = body[\"embedUrl\"];\n\t\t\t\t\t\t\tthisObj.setState({ accessToken: accessToken, embedUrl: embedUrl });\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// If error message is available\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\terrorMessage.push(\"Error \" + response.status + \": \" + body.error.code);\n\n\t\t\t\t\t\t\tthisObj.setState({ error: errorMessage });\n\t\t\t\t\t\t}\n\n\t\t\t\t\t})\n\t\t\t\t\t.catch(function () {\n\t\t\t\t\t\terrorMessage.push(\"Error \" + response.status + \":  An error has occurred\");\n\n\t\t\t\t\t\tthisObj.setState({ error: errorMessage });\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(function (error) {\n\n\t\t\t\t// Error in making the API call\n\t\t\t\tthisObj.setState({ error: error });\n\t\t\t})\n\t}\n\n\t// Show username in the UI\n\tsetUsername(username: string): void {\n\t\tconst welcome = document.getElementById(\"welcome\");\n\t\tif (welcome !== null)\n\t\t\twelcome.innerText = \"Welcome, \" + username;\n\t}\n}\n\nexport default App;","// ----------------------------------------------------------------------------\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// ----------------------------------------------------------------------------\n\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'semantic-ui-css/semantic.min.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}