{"version":3,"sources":["Config.ts","provenance/Provenance.ts","provenance/utils.ts","provenance/Provectories.ts","provenance/DownloadAsCSVBtn.tsx","App.tsx","index.tsx"],"names":["scopes","workspaceId","reportId","setupProvenance","report","defaultState","bookmarkRef","provenance","initProvenance","done","event","onDashboardClick","a","newState","label","apply","state","stateSaveMode","actionType","eventType","meta","actions","captureBookmark","bookmarksManager","capture","console","error","undefined","exportData","visual","tries","result","models","ExportDataType","Summarized","title","toCamelCaseString","split","map","t","i","toUpperCase","slice","join","getVisualAttributeMapper","mapper","getCapabilities","capabilities","dataRoles","Promise","all","role","getDataFields","name","dataFields","length","d","idx","getDataFieldDisplayName","attribute","getCurrentVisuals","getPages","then","pages","filter","page","isActive","getVisuals","visuals","v","type","setProvenance","newProvenance","Object","keys","forEach","key","Provectories","appState","bookmark","this","current","init","dataPoints","detail","visDesc","selected","identity","target","column","equals","toString","categoryMapper","data","replaceAll","groupedData","header","index","currSet","category","row","cell","number","match","value","parseInt","push","visState","currArr","Array","from","reduce","b","Set","captured","initAppState","setVisState","setBookmark","getActivePage","activePage","on","setVisSelected","obj","JSON","parse","stringify","log","DownloadAsCSVBtn","forceUpdate","React","useState","prov","setProv","off","root","featureVectorizeGraph","graph","featureVectors","nodes","currNode","currVector","currState","rootState","featureVector","vKey","rootVisState","aKey","rootAttribute","currAttribute","vector","includes","appStateToFeatureVector","getState","id","newRow","metadata","createdOn","USER","downloadGraphAsFeatVecCsv","uri","encodeURI","exportFeatureVectorRows","csvString","newString","featureVectorsToCsvString","anchor","document","createElement","style","display","download","Date","getTime","href","click","window","open","remove","marginLeft","marginRight","className","onClick","reportContainer","powerbi","service","Service","factories","hpmFactory","wpmpFactory","routerFactory","accessToken","embedUrl","App","props","myReport","reportRef","createRef","renderMyReport","flexDirection","margin","flex","ref","marginBottom","bind","authenticate","textContent","line","appendChild","createTextNode","embedConfiguration","tokenType","TokenType","Aad","permissions","Permissions","All","config","settings","visualRenderedEvents","panes","filters","visible","pageNavigation","embed","provectories","errorMsg","reset","thisObj","msalConfig","auth","clientId","loginRequest","msalInstance","UserAgentApplication","handleRedirectCallback","response","setUsername","account","getembedUrl","setState","getAccount","acquireTokenSilent","catch","err","acquireTokenRedirect","loginRedirect","fetch","headers","method","errorMessage","get","json","body","ok","status","code","username","welcome","getElementById","innerText","Component","uuid","ReactDOM","render"],"mappings":"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","file":"static/js/main.912d01d5.chunk.js","sourcesContent":["// ----------------------------------------------------------------------------\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// ----------------------------------------------------------------------------\n\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n\n// Scope of AAD app. Use the below configuration to use all the permissions provided in the AAD app through Azure portal.\n// Refer https://aka.ms/PowerBIPermissions for complete list of Power BI scopes\n// https://analysis.windows.net/powerbi/api/Report.Read.All\nexport const scopes: string[] = [\"https://analysis.windows.net/powerbi/api/Report.Read.All\"];\n\n// Client Id (Application Id) of the AAD app.\nexport const clientId: string = \"f1f98e67-aeb3-406c-a3f6-8c90654a8562\";\n\n// Id of the workspace where the report is hosted\nexport const workspaceId: string = \"0223b04f-f0a4-43c6-9dbe-e152236e6a5a\";\n\n// Id of the report to be embedded\nexport const reportId: string = \"7c8477cc-60dc-4edf-a9f0-71b6f1b575da\";","import { Provenance, initProvenance } from '@visdesignlab/trrack';\nimport { Report } from 'powerbi-client';\nimport { IProvectories } from './interfaces';\nimport { ActionReturnType } from '@visdesignlab/trrack/dist/Types/Action';\n\nexport interface IAction {\n  event: (onDashboardClick: () => Promise<{ newState: IProvectories, label: string }>) => void;\n}\n\ninterface IAppProvenance {\n  provenance: Provenance<IProvectories, string, void>;\n  actions: IAction;\n}\n\n/**\n * Initializes trrack and trrack-vis provenance\n * @param report Current report to apply bookmarks on\n * @param defaultState Initial state of the dashboard\n * @param bookmarkRef Current bookmarkRef to get the update bookmark for performance improvements\n */\nexport function setupProvenance(report: Report, defaultState: IProvectories, bookmarkRef: { current: string }): IAppProvenance {\n  const provenance = initProvenance<IProvectories, string, void>(defaultState as IProvectories);\n\n  // provenance.addGlobalObserver(() => {\n  //   const currentNode = provenance.getState(provenance.current);\n  //   if (bookmarkRef.current !== currentNode.bookmark) {\n  //     console.log('applied')\n  //     applyBookmark(provenance.getState(provenance.current).bookmark, report);\n  //     bookmarkRef.current = '';\n  //   }\n  // });\n\n  provenance.done();\n\n  const event = async (onDashboardClick: () => Promise<{ newState: IProvectories, label: string }>) => {\n    const { newState, label } = await onDashboardClick();\n    provenance.apply({\n      apply: (state: IProvectories) => ({\n        state: newState as IProvectories,\n        label,\n        stateSaveMode: 'Complete',\n        actionType: 'Regular',\n        eventType: '',\n        meta: {}\n      } as ActionReturnType<IProvectories, string>)\n    }, label);\n  };\n\n  // removed trrack vis because of simplicity (list instead of graph)\n  // const provVisUpdate = () => {\n  //   const provDiv = document.getElementById(\"provDiv\");\n  //   if (provDiv) {\n  //     ProvVisCreator(\n  //       provDiv!,\n  //       provenance,\n  //       (id: NodeID) => provenance.goToNode(id),\n  //       true, false, undefined, { height: 500, width: 150, textSize: 12, verticalSpace: 25 });\n  //   }\n  // };\n  // provVisUpdate();\n\n  return {\n    provenance,\n    actions: {\n      event\n    },\n  };\n}\n","import { Report } from \"report\";\nimport { IReportBookmark, IExportDataResult } from \"powerbi-models\";\nimport { models, VisualDescriptor } from \"powerbi-client\";\nimport 'powerbi-report-authoring';\n\n/**\n * Captures and returns current bookmark\n * @param report Report to capture bookmark from\n */\nexport async function captureBookmark(report: Report): Promise<IReportBookmark | undefined> {\n\ttry {\n\t\treturn await report.bookmarksManager.capture();\n\t}\n\tcatch (error) {\n\t\tconsole.error(error);\n\t}\n\treturn undefined;\n}\n\n/**\n * Applies given bookmark on report\n * @param bookmark Bookmark to apply to\n * @param report Report to apply bookmark on\n */\nexport async function applyBookmark(bookmark: string, report: Report): Promise<void> {\n\ttry {\n\t\tawait report.bookmarksManager.applyState(bookmark);\n\t}\n\tcatch (error) {\n\t\tconsole.error(error);\n\t}\n}\n\n/**\n * Exports underlying data of given visual and handles errors\n * @param visual Visual to get underlying data from\n */\nexport async function exportData(visual: VisualDescriptor): Promise<IExportDataResult | null> {\n\t// starting on 12/16/2021, exportData throws error.\n\t// If call exportData repeatedly a few times then it starts to work.\n\t// Implement pattern to try 4 times before throwing an error\n\n\tlet tries = 0;\n\tlet result: models.IExportDataResult | null = null;\n\twhile (tries < 4) {\n\t\ttry {\n\t\t\tresult = await visual.exportData(models.ExportDataType.Summarized);\n\t\t\tbreak;\n\t\t} catch (err) {\n\t\t\ttries++;\n\t\t\tif (tries === 4) {\n\t\t\t\tconsole.error(('exportData - ' + visual.title), err);\n\t\t\t\t// console.error(`exportData [tries]: ${tries}`);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\n/**\n * Create exact copy of object without referencing on it\n * @param obj Object to copy\n */\nexport function makeDeepCopy<T extends Object>(obj: T): T {\n\treturn typeof obj === 'object' ? JSON.parse(JSON.stringify(obj)) : obj;\n}\n\n/**\n * Takes string and returns multiple word string as one word camel case string\n * @param title String to be camel cased\n */\nexport function toCamelCaseString(title: string): string {\n\treturn title\n\t\t.split(' ')\n\t\t.map((t, i) => i === 0 ? t : t[0].toUpperCase() + t.slice(1))\n\t\t.join('');\n}\n\n/**\n * Categorizes columns of agiven visual to their attribute of the chart in a dict and returns it \n * @param visual \n */\nexport async function getVisualAttributeMapper(visual: VisualDescriptor): Promise<{ [key: string]: string }> {\n\t// const roleToAttributeMap = {\n\t// \t'Y': 'yAxis',\n\t// \t'Category': 'xAxis',\n\t// \t'Series': 'Legend',\n\t// \t'Values': 'Field'\n\t// };\n\n\tconst mapper: { [key: string]: string } = {};\n\tif (visual.getCapabilities) {\n\t\tconst capabilities = await visual.getCapabilities();\n\t\tif (capabilities.dataRoles) {\n\t\t\tawait Promise.all(capabilities.dataRoles.map(async (role) => {\n\t\t\t\tconst dataFields = await visual.getDataFields(role.name);\n\t\t\t\tif (dataFields.length > 0) {\n\t\t\t\t\tawait Promise.all(dataFields.map(async (d, idx) => {\n\t\t\t\t\t\tconst attribute = await visual.getDataFieldDisplayName(role.name, idx);\n\t\t\t\t\t\t// mapper[toCamelCaseString(attribute)] = roleToAttributeMap[role.name];\n\t\t\t\t\t\tmapper[toCamelCaseString(attribute)] = role.name;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}))\n\t\t}\n\t}\n\treturn mapper;\n}\n\n/**\n * Extracts current visuals from a dashboard of a report and returns them in an array\n * @param report Report to extract visuals from\n * Only possible if report is loaded\n */\nexport async function getCurrentVisuals(report: Report): Promise<VisualDescriptor[]> {\n\ttry {\n\t\treturn report\n\t\t\t.getPages().then(async (pages) => pages.filter((page) => page.isActive)[0]\n\t\t\t\t.getVisuals().then((visuals) => visuals\n\t\t\t\t\t.filter((v) => v.type !== 'card' && v.type !== 'shape')));\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\treturn [];\n\t}\n}\n","import { Report } from \"report\";\nimport { setupProvenance } from \"./Provenance\";\nimport { IAppState, IProvectories } from \"./interfaces\";\nimport { captureBookmark, exportData, toCamelCaseString, getCurrentVisuals, makeDeepCopy, getVisualAttributeMapper } from \"./utils\";\nimport { Provenance } from \"@visdesignlab/trrack\";\nimport 'powerbi-report-authoring';\n\nexport const provenance: Provenance<IProvectories, string, void> = {} as Provenance<IProvectories, string, void>;\n\nfunction setProvenance(newProvenance: Provenance<IProvectories, string, void>) {\n\tObject.keys(newProvenance).forEach((key) => {\n\t\tprovenance[key] = newProvenance[key];\n\t});\n}\n\nclass Provectories {\n\tprivate readonly appState: IAppState;\n\tprivate readonly bookmark: { current: string };\n\tprivate readonly report: Report;\n\n\tconstructor(report: Report) {\n\t\tthis.appState = {};\n\t\tthis.bookmark = { current: '' };\n\t\tthis.report = report;\n\t\tthis.init();\n\t}\n\n\t/**\n\t * Sets the selected attribute of given visuals extracted from the click-event\n\t * Only possible if report is loaded\n\t * @param event click-event from dashboard eventlistener\n\t */\n\tsetVisSelected(event: any): string {\n\t\tconst { dataPoints } = event.detail;\n\t\tconst { type, title } = event.detail.visual;\n\t\tconst visuals = this.appState;\n\t\tlet label = `${title} (${type}) - `;\n\n\t\t// clears non slicer values when non slicer selection\n\t\tif (type !== 'slicer') {\n\t\t\tObject.keys(visuals).forEach((key) => {\n\t\t\t\tconst visDesc = visuals[key];\n\t\t\t\tvisDesc.selected = visDesc.type !== 'slicer' ? null : visDesc.selected;\n\t\t\t});\n\t\t}\n\t\t// asign selected values\n\t\tconst visDesc = visuals[toCamelCaseString(title)];\n\t\tif (dataPoints.length > 0) {\n\t\t\tdataPoints[0].identity.forEach((i: any, idx: number) => {\n\t\t\t\tvisDesc.selected = { ...visDesc.selected, [i.target.column]: i.equals.toString() };\n\t\t\t\tlabel += `${idx > 0 ? ', ' : ''}${i.target.column}: ${i.equals}`;\n\t\t\t});\n\t\t\treturn label + ' selected';\n\t\t}\n\t\tvisDesc.selected = null;\n\t\treturn label + 'deselected';\n\t};\n\n\t/**\n\t * Sets the current state of all visuals of the dashboard on given appState\n\t * Only possible if report is loaded\n\t * @param appState appState object of which the visuals should be set\n\t */\n\tasync setVisState(appState: IAppState): Promise<IAppState> {\n\t\tconst visuals = await getCurrentVisuals(this.report);\n\t\tawait Promise.all(visuals.map(async (v) => {\n\t\t\tconst result = await exportData(v);\n\t\t\tconst categoryMapper = await getVisualAttributeMapper(v);\n\t\t\tif (!result) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// vectorize data string && remove last row (empty)\n\t\t\tconst data = result.data.replaceAll(\"\\n\", \"\").split('\\r').map((d) => d.split(',')).slice(0, -1);\n\t\t\tconst groupedData: { [key: string]: any[] } = {};\n\n\t\t\t// group data columnwise\n\t\t\tdata[0].forEach((header, index) => {\n\t\t\t\tconst key = toCamelCaseString(header);\n\t\t\t\tgroupedData[key] = [];\n\t\t\t\tconst currSet = groupedData[key];\n\t\t\t\tconst category = categoryMapper[key];\n\n\t\t\t\tdata.forEach((row, idx) => {\n\t\t\t\t\t// skip headers and empty values\n\t\t\t\t\tif (idx === 0 || !row[index]) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst cell = row[index];\n\t\t\t\t\tconst number = cell.match(/\\d+/);\n\t\t\t\t\t// only add as number, when cell is not from a category column or legend\n\t\t\t\t\tconst value = number && category === 'Y' ? parseInt(number[0]) : cell;\n\t\t\t\t\tcurrSet.push(value);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst { visState } = appState[toCamelCaseString(v.title)];\n\t\t\t// assign to visual state in right format\n\t\t\tObject.keys(groupedData).forEach((key) => {\n\t\t\t\tconst currArr: string[] | number[] = Array.from(groupedData[key]);\n\t\t\t\tvisState[key] = typeof currArr[0] === 'number' ?\n\t\t\t\t\t(currArr as number[]).reduce((a, b) => a + b, 0) : Array.from(new Set(currArr as string[]));\n\t\t\t});\n\t\t}));\n\t\treturn appState;\n\t};\n\n\t/**\n\t * Captures bookmark of the current dashboard state, sets it in the bookmarkRef and returns bookmark\n\t * Only possible if report is loaded\n\t */\n\tasync setBookmark(): Promise<string> {\n\t\treturn await captureBookmark(this.report).then((captured) => {\n\t\t\tconst bookmark = captured?.state || '';\n\t\t\tthis.bookmark.current = bookmark;\n\t\t\treturn bookmark;\n\t\t});\n\t};\n\n\t/**\t\n\t* Initialize appState\n\t* Only possible if report is loaded\n\t*/\n\tasync initAppState() {\n\t\tconst visuals = await getCurrentVisuals(this.report);\n\t\tvisuals.forEach((v) => {\n\t\t\tconst title = toCamelCaseString(v.title);\n\t\t\tif (this.appState && !this.appState[title]) {\n\t\t\t\tthis.appState[toCamelCaseString(title)] = { selected: null, type: v.type, visState: {} };\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * initializes provenance, click-event handler and the appState\n\t */\n\tasync init(): Promise<void> {\n\t\tawait this.initAppState();\n\t\tconst appState = await this.setVisState(this.appState);\n\t\tconst bookmark = await this.setBookmark();\n\t\tconst { actions, provenance } = setupProvenance(\n\t\t\tthis.report, { appState, bookmark }, this.bookmark\n\t\t);\n\n\t\tsetProvenance(provenance);\n\t\tconst activePage = (await this.report.getActivePage()).name;\n\n\t\tthis.report?.on(\"dataSelected\", async (event: any) => {\n\t\t\t// used closure to check if the current page equals the page provenance is initialized on\n\t\t\t// otherwise the provenance would make no sense for this case\n\t\t\tif (activePage === (await this.report.getActivePage()).name) {\n\t\t\t\tconst label = this.setVisSelected(event);\n\t\t\t\tconst bookmark = await this.setBookmark();\n\n\t\t\t\t// function call is done in provenance for better performance on the dashboard\n\t\t\t\tconst onDashboardClick = async () => {\n\t\t\t\t\tconst appState = await this.setVisState(makeDeepCopy(this.appState));\n\t\t\t\t\tconsole.log(appState);\n\t\t\t\t\treturn { newState: { bookmark, appState }, label };\n\t\t\t\t};\n\n\t\t\t\tactions.event(onDashboardClick);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Not on the tracked page\");\n\t\t\t}\n\t\t});\n\t};\n}\n\nexport function provectories(report: Report): void {\n\tnew Provectories(report);\n}","import React from \"react\";\nimport { IProvectories, IAppState, IFeatureVector, IExportFeatureVectorRow } from \"./interfaces\";\nimport { Provenance } from \"@visdesignlab/trrack\";\nimport { provenance } from \"./Provectories\";\nimport { Report } from \"powerbi-client\";\nimport { USER } from \"..\";\n\nexport function DownloadAsCSVBtn({ report, forceUpdate }: { report: Report; forceUpdate: () => void }) {\n  const [prov, setProv] = React.useState<Provenance<IProvectories, string, void> | null>(null);\n\n  /*\n    Provectories.provenance is an uncontrolled, empty object in the beginning\n    When the report is loaded and rendered Provectories.provenance isn't empty anymore\n    Set prov with Provectories.provenance when report is rerendered the first time to get an complete object and trigger a rerender for the JSX\n  */\n  report.off('rendered');\n  report.on('rendered', () => {\n    if (provenance?.root && !prov?.root) {\n      setProv(provenance);\n      report.off('rendered');\n    }\n  });\n\n  /**\n  * Takes an appState and encodes it as a feature vector. Needs initial app state to know if an attribute is filtered\n  * @param currState State to encode as a feature vector\n  * @param rootState Initial app state\n  */\n  function appStateToFeatureVector(currState: IAppState, rootState: IAppState): IFeatureVector {\n    const featureVector: IFeatureVector = {};\n    Object.keys(rootState).forEach((vKey) => {\n      const { visState, selected, type } = currState[vKey];\n      const rootVisState = rootState[vKey].visState;\n      Object.keys(rootVisState).forEach((aKey) => {\n        const rootAttribute = rootVisState[aKey];\n        const currAttribute = visState[aKey];\n        const vector = (featureVector[vKey + '.' + aKey] = []) as number[];\n        // number arrays will be used as they are\n        if (typeof rootAttribute === 'number') {\n          vector.push((currAttribute as number) / rootAttribute);\n        } else { // string arrays will be encoded\n          rootAttribute.forEach((root) => {\n            vector.push(selected && selected[aKey] === root ? 1 : 0); // if selected 1\n            if (type !== 'slicer') { // slicers can't be filtered\n              vector.push((currAttribute as string[]).includes(root) ? 0 : 1); // if filtered then 1 (included = !filtered)\n            }\n          });\n        }\n      });\n    });\n    return featureVector;\n  };\n\n  /**\n   * Goes through graph, returns feature vector row for each node and returns feature vector matrix\n   * @param provenance Provenance object to featurize\n   */\n  const featureVectorizeGraph = (provenance: Provenance<IProvectories, string, void>): IExportFeatureVectorRow[] => {\n    const { root, graph } = provenance;\n    const featureVectors: IExportFeatureVectorRow[] = [];\n\n    Object.keys(graph.nodes).forEach((key) => {\n      const currNode = graph.nodes[key];\n      const currVector = appStateToFeatureVector(\n        provenance.getState(currNode.id).appState, provenance.getState(root.id).appState\n      );\n      // adding header row\n      if (key === root.id) {\n        featureVectors.push(['time', 'user', 'label', ...Object.keys(currVector)]);\n      }\n      const newRow: IExportFeatureVectorRow = [currNode.metadata.createdOn || -1, USER, currNode.label];\n      // skip first column since time is no key in feature vector\n      (featureVectors[0] as string[]).forEach((title) => currVector[title] ? newRow.push(currVector[title]) : null);\n      featureVectors.push(newRow);\n    });\n    return featureVectors;\n  };\n\n  /**\n   * Takes feature vector matrix and converts it to a csv-string\n   * @param exportFeatureVectorRows Feature vector matrix\n   */\n  const featureVectorsToCsvString = (exportFeatureVectorRows: IExportFeatureVectorRow[]): string => {\n    let csvString = 'data:text/csv;charset=utf-8,';\n    exportFeatureVectorRows.forEach((row, idx) => {\n      if (idx === 0) {\n        csvString += row.join(';') + '\\r\\n';\n      } else {\n        (row as IExportFeatureVectorRow).forEach((cell, i) => {\n          let newString = typeof cell === \"string\" ? cell : JSON.stringify(cell);\n          // removes brackets\n          newString = newString.replaceAll('[', '').replaceAll(']', '');\n          csvString += newString;\n          csvString += i < row.length - 1 ? ';' : '\\r\\n'\n        });\n      }\n    });\n    return csvString;\n  };\n\n  // /**\n  //  * Returns csv file representing feature vectors of a provenance graph\n  //  * @param provenance Provenance object to convert to csv\n  //  */\n  const downloadGraphAsFeatVecCsv = (provenance: Provenance<IProvectories, string, void>): void => {\n    const uri = encodeURI(featureVectorsToCsvString(featureVectorizeGraph(provenance)))\n    const anchor = document.createElement('a');\n    anchor.style.display = 'none';\n    if (\"download\" in anchor) {\n      anchor.download = `provectories-${USER}-${new Date().getTime()}.csv`;\n      anchor.href = uri;\n      anchor.click();\n    } else {\n      window.open(uri, '_self');\n    }\n    anchor.remove();\n  };\n\n  return <div style={{ marginLeft: 'auto' }}>\n    {prov ?\n      <div style={{ marginRight: 0 }}>\n        <button type=\"button\" className=\"ui button\" onClick={() => forceUpdate()}>\n          Reset provenance\n        </button>\n        <button className=\"ui button\" type=\"button\" onClick={() => downloadGraphAsFeatVecCsv(prov)}>\n          Download as CSV\n        </button>\n      </div> : null}\n  </div>;\n}\n","// ----------------------------------------------------------------------------\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// ----------------------------------------------------------------------------\n\nimport React, { RefObject } from \"react\";\nimport { UserAgentApplication, AuthError, AuthResponse } from \"msal\";\nimport { service, factories, models, IEmbedConfiguration, Report } from \"powerbi-client\";\nimport \"./App.css\";\nimport * as config from \"./Config\";\nimport { provectories } from \"./provenance/Provectories\";\nimport { DownloadAsCSVBtn } from \"./provenance/DownloadAsCSVBtn\";\nconst powerbi = new service.Service(factories.hpmFactory, factories.wpmpFactory, factories.routerFactory);\n\nlet accessToken = \"\";\nlet embedUrl = \"\";\nlet reportContainer: HTMLElement;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface AppProps { };\ninterface AppState { accessToken: string; embedUrl: string; error: string[]; reportRef: RefObject<any>; };\n\nclass App extends React.Component<AppProps, AppState> {\n\tprivate myReport: any | Report;\n\n\tconstructor(props: AppProps) {\n\t\tsuper(props);\n\t\tthis.state = { accessToken: \"\", embedUrl: \"\", error: [], reportRef: React.createRef() };\n\t\tthis.myReport = null;\n\t}\n\n\t// React function\n\trender(): JSX.Element {\n\t\tthis.myReport = this.renderMyReport();\n\t\treturn (<>\n\t\t\t<div style={{ display: 'flex', flexDirection: 'column', margin: 15 }}>\n\t\t\t\t<div style={{ display: 'flex', flex: 1 }}>\n\t\t\t\t\t<div id=\"reportContainer\" ref={this.state.reportRef} style={{ display: 'flex', flex: 1, marginBottom: 5 }} >\n\t\t\t\t\t\tLoading the report...\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{this.myReport ? <DownloadAsCSVBtn report={this.myReport} forceUpdate={this.forceUpdate.bind(this)} /> : null}\n\t\t\t</div>\n\t\t</>);\n\t}\n\n\t// React function\n\tasync componentDidMount(): Promise<void> {\n\n\t\tif (this.state.reportRef !== null) {\n\t\t\treportContainer = this.state.reportRef[\"current\"];\n\t\t}\n\n\t\t// User input - null check\n\t\tif (config.workspaceId === \"\" || config.reportId === \"\") {\n\t\t\tthis.setState({ error: [\"Please assign values to workspace Id and report Id in Config.ts file\"] })\n\t\t} else {\n\n\t\t\t// Authenticate the user and generate the access token\n\t\t\tthis.authenticate();\n\t\t}\n\t}\n\n\trenderMyReport(): Report {\n\t\tlet report: any | Report = null;\n\n\t\tif (this.state.error.length) {\n\t\t\t// Cleaning the report container contents and rendering the error message in multiple lines\n\t\t\treportContainer.textContent = \"\";\n\t\t\tthis.state.error.forEach(line => {\n\t\t\t\treportContainer.appendChild(document.createTextNode(line));\n\t\t\t\treportContainer.appendChild(document.createElement(\"br\"));\n\t\t\t});\n\t\t\tconsole.log('Error', this.state.error);\n\t\t} else if (this.state.accessToken !== \"\" && this.state.embedUrl !== \"\") { // comment this condition\n\n\t\t\tconst embedConfiguration: IEmbedConfiguration = {\n\t\t\t\ttype: \"report\",\n\t\t\t\ttokenType: models.TokenType.Aad,\n\t\t\t\taccessToken,\n\t\t\t\tembedUrl,\n\t\t\t\tpermissions: models.Permissions.All,\n\t\t\t\tid: config.reportId,\n\t\t\t\tsettings: {\n\t\t\t\t\tvisualRenderedEvents: true,\n\t\t\t\t\tpanes: {\n\t\t\t\t\t\tfilters: {\n\t\t\t\t\t\t\tvisible: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpageNavigation: {\n\t\t\t\t\t\t\tvisible: true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treport = powerbi.embed(reportContainer, embedConfiguration) as Report;\n\n\n\t\t\t// Clear any other loaded handler events\n\t\t\treport.off(\"loaded\");\n\n\n\t\t\t// Triggers when a content schema is successfully loaded\n\t\t\treport.on(\"loaded\", function () {\n\t\t\t\tconsole.log(\"Report load successful\");\n\t\t\t\t// init provectories\n\t\t\t\tprovectories(report);\n\t\t\t});\n\n\t\t\t// Clear any other error handler event\n\t\t\treport.off(\"error\");\n\n\t\t\t// Below patch of code is for handling errors that occur during embedding\n\t\t\treport.on(\"error\", function (event: any) {\n\t\t\t\tconst errorMsg = event.detail;\n\n\t\t\t\t// Use errorMsg variable to log error in any destination of choice\n\t\t\t\tconsole.error(errorMsg);\n\t\t\t});\n\t\t}\n\n\t\treturn report;\n\t}\n\n\t// React function\n\tcomponentWillUnmount(): void {\n\t\tpowerbi.reset(reportContainer);\n\t}\n\n\t// Authenticating to get the access token\n\tauthenticate(): void {\n\t\tconst thisObj = this;\n\n\t\tconst msalConfig = {\n\t\t\tauth: {\n\t\t\t\tclientId: config.clientId\n\t\t\t}\n\t\t};\n\n\t\tconst loginRequest = {\n\t\t\tscopes: config.scopes\n\t\t};\n\n\t\tconst msalInstance: UserAgentApplication = new UserAgentApplication(msalConfig);\n\n\t\tfunction successCallback(response: AuthResponse): void {\n\n\t\t\tif (response.tokenType === \"id_token\") {\n\t\t\t\tthisObj.authenticate();\n\n\t\t\t} else if (response.tokenType === \"access_token\") {\n\n\t\t\t\taccessToken = response.accessToken;\n\t\t\t\tthisObj.setUsername(response.account.name);\n\t\t\t\tthisObj.getembedUrl();\n\n\t\t\t} else {\n\n\t\t\t\tthisObj.setState({ error: [(\"Token type is: \" + response.tokenType)] });\n\t\t\t}\n\t\t}\n\n\t\tfunction failCallBack(error: AuthError): void {\n\n\t\t\tthisObj.setState({ error: [\"Redirect error: \" + error] });\n\t\t}\n\n\t\tmsalInstance.handleRedirectCallback(successCallback, failCallBack);\n\n\t\t// check if there is a cached user\n\t\tif (msalInstance.getAccount()) {\n\n\t\t\t// get access token silently from cached id-token\n\t\t\tmsalInstance.acquireTokenSilent(loginRequest)\n\t\t\t\t.then((response: AuthResponse) => {\n\n\t\t\t\t\t// get access token from response: response.accessToken\n\t\t\t\t\taccessToken = response.accessToken;\n\t\t\t\t\tthis.setUsername(response.account.name);\n\t\t\t\t\tthis.getembedUrl();\n\t\t\t\t})\n\t\t\t\t.catch((err: AuthError) => {\n\n\t\t\t\t\t// refresh access token silently from cached id-token\n\t\t\t\t\t// makes the call to handleredirectcallback\n\t\t\t\t\tif (err.name === \"InteractionRequiredAuthError\") {\n\t\t\t\t\t\tmsalInstance.acquireTokenRedirect(loginRequest);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthisObj.setState({ error: [err.toString()] })\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} else {\n\n\t\t\t// user is not logged in or cached, you will need to log them in to acquire a token\n\t\t\tmsalInstance.loginRedirect(loginRequest);\n\t\t}\n\t}\n\n\t// Power BI REST API call to get the embed URL of the report\n\tgetembedUrl(): void {\n\t\tconst thisObj: this = this;\n\n\t\tfetch(\"https://api.powerbi.com/v1.0/myorg/groups/\" + config.workspaceId + \"/reports/\" + config.reportId, {\n\t\t\theaders: {\n\t\t\t\t\"Authorization\": \"Bearer \" + accessToken\n\t\t\t},\n\t\t\tmethod: \"GET\"\n\t\t})\n\t\t\t.then(function (response) {\n\t\t\t\tconst errorMessage: string[] = [];\n\t\t\t\terrorMessage.push(\"Error occurred while fetching the embed URL of the report\")\n\t\t\t\terrorMessage.push(\"Request Id: \" + response.headers.get(\"requestId\"));\n\n\t\t\t\tresponse.json()\n\t\t\t\t\t.then(function (body) {\n\t\t\t\t\t\t// Successful response\n\t\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\t\tembedUrl = body[\"embedUrl\"];\n\t\t\t\t\t\t\tthisObj.setState({ accessToken: accessToken, embedUrl: embedUrl });\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// If error message is available\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\terrorMessage.push(\"Error \" + response.status + \": \" + body.error.code);\n\n\t\t\t\t\t\t\tthisObj.setState({ error: errorMessage });\n\t\t\t\t\t\t}\n\n\t\t\t\t\t})\n\t\t\t\t\t.catch(function () {\n\t\t\t\t\t\terrorMessage.push(\"Error \" + response.status + \":  An error has occurred\");\n\n\t\t\t\t\t\tthisObj.setState({ error: errorMessage });\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(function (error) {\n\n\t\t\t\t// Error in making the API call\n\t\t\t\tthisObj.setState({ error: error });\n\t\t\t})\n\t}\n\n\t// Show username in the UI\n\tsetUsername(username: string): void {\n\t\tconst welcome = document.getElementById(\"welcome\");\n\t\tif (welcome !== null)\n\t\t\twelcome.innerText = \"Welcome, \" + username;\n\t}\n}\n\nexport default App;","// ----------------------------------------------------------------------------\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// ----------------------------------------------------------------------------\n\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'semantic-ui-css/semantic.min.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { v4 as uuid } from 'uuid';\n\nexport const USER: string = uuid();\nconsole.log(USER);\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}